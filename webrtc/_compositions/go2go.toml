[metadata]
  name = "go2go {{ .Env.GitReference }}"

[global]
  plan = "libp2p/webrtc"
  case = "webrtc"
  builder = "docker:go"
  runner = "local:docker"
  total_instances = 2

  [global.build_config]
    enable_go_build_cache  = false # see https://github.com/testground/testground/issues/1361
    go_proxy_mode          = "remote"
    go_proxy_url           = "https://proxy.golang.org"

    # enable_go_build_cache  = true
    # go_proxy_mode          = "remote"
    # go_proxy_url           = "https://goproxy.io,direct"

[[groups]]
  id = "server"
  instances = { count = 1 }
  builder = "docker:go" # override builder here

  [groups.build_config]
    path = "./go"
    build_args = { image = "golang:1.19-bullseye" }
    modfile = "go.orig.mod"

  [groups.run.test_params]
    expected_implementation = "go"

  [groups.build_config.dockerfile_extensions]
    pre_build = '''
RUN echo server prebuild
RUN grep -n . go.???
RUN go get github.com/minio/sha256-simd@v1.0.0
RUN go get github.com/prometheus/client_golang/prometheus@v1.13.0
RUN go mod tidy
RUN grep -n . go.???
'''
    pre_mod_download = '''
RUN echo pre_mod_download
RUN git clone https://github.com/John-LittleBearLabs/go-libp2p.git /go-libp2p/
RUN find / -name 'go.mod' -exec ls -lrth '{}' +
RUN echo heres hoppin
'''

[[groups]]
  id = "client"
  instances = { count = 1 }
  builder = "docker:go" # override builder here

  [groups.build_config]
    path = "./go"
    build_args = { image = "golang:1.19-bullseye" }
    modfile = "go.orig.mod"

  [groups.run.test_params]
    expected_implementation = "go"

  [groups.build_config.dockerfile_extensions]
    pre_build = "RUN echo client prebuild"
    pre_mod_download = '''
RUN echo pre_mod_download
RUN git clone https://github.com/John-LittleBearLabs/go-libp2p.git /go-libp2p/
RUN find / -name 'go.mod' -exec ls -lrth '{}' +
RUN echo heres hoppin
'''

#{{ with (load_resource "./go.toml" ) }}
  #{{ range .groups }}
    #[[groups]]
    #id = "{{ .Id }}"
    #instances = { count = 1 }

    #[groups.build]
      #selectors = ['{{ .Selector }}']

    #[groups.build_config]
      #build_base_image = 'golang:{{ .GoVersion }}-buster'
      #modfile = "{{ .Modfile }}"
  #{{ end }}

  #{{ with .master }}
    #[[groups]]
    #id = "master"
    #instances = { count = 1 }

    #[groups.build]
      #selectors = ['{{ .Selector }}']

      #[[groups.build.dependencies]]
        #module = "github.com/libp2p/go-libp2p"
        #version = "v1.2.5"

    #[groups.build_config]
      #build_base_image = 'golang:{{ .GoVersion }}-buster'
      #modfile = "{{ .Modfile }}"

    #[groups.build_config.dockerfile_extensions]
      ## deal with dependency changes in master until we create the new vx.y.z instance
      #pre_build = """
        #RUN echo 'master prebuild' && cd ${PLAN_DIR} && \
            #go mod download github.com/libp2p/go-libp2p

        #RUN cd ${PLAN_DIR} && \
            #go mod tidy -compat={{ .GoVersion }}
        #"""
  #{{ end }}

  #{{ if $.Env.GitReference }}
    #{{ with .custom }}
      #[[groups]]
      #id = "custom"
      #instances = { count = 1 }

      #[groups.build]
        #selectors = ['{{ .Selector }}']

      #[[groups.build.dependencies]]
        #module = "github.com/libp2p/go-libp2p"
        #version = "v1.2.6"
        #{{ if $.Env.GitTarget }}
        #target = "{{ $.Env.GitTarget }}"
        #{{ end }}

      #[groups.build_config]
        #build_base_image = 'golang:{{ .GoVersion }}-buster'
        #modfile = "{{ .Modfile }}"

      #[groups.build_config.dockerfile_extensions]
        ## deal with dependency changes in master until we create the new vx.y.z instance
        #pre_build = """
          #RUN echo 'custom prebuild' && cd ${PLAN_DIR} && \
              #go mod download github.com/libp2p/go-libp2p

          #RUN cd ${PLAN_DIR} && \
              #go mod tidy -compat={{ .GoVersion }}
          #"""
    #{{ end }}
  #{{ end }}
#{{ end }}
